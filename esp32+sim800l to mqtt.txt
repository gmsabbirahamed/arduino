#define TINY_GSM_MODEM_SIM800 // Define the GSM modem model

#include <TinyGsmClient.h>
#include <PubSubClient.h>
#include <ArduinoJson.h> // Optional for advanced JSON payloads

// Debug Serial and SIM800L connection pins
#define SerialMon Serial
#define SerialAT Serial1
#define MODEM_RST 5   // Reset pin for SIM800L (if used)
#define MODEM_PWRKEY 4 // Power key pin (optional)
#define MODEM_TX 17    // Connect to SIM800L RX
#define MODEM_RX 16    // Connect to SIM800L TX

// Replace with your network details
const char apn[] = "your_apn";      // APN of your mobile network
const char user[] = "";            // APN username (if required)
const char pass[] = "";            // APN password (if required)

// MQTT Broker settings
const char* broker = "broker2.com";
const char* mqttUser = "user2";
const char* mqttPass = "pass2";
const char* topic = "sabbir/gprs";

// TinyGSM initialization
TinyGsm modem(SerialAT);
TinyGsmClient mqttClient(modem);
PubSubClient mqtt(mqttClient);

void setup() {
  // Initialize Serial for debugging
  SerialMon.begin(115200);
  delay(10);
  SerialMon.println("Initializing...");

  // Initialize Serial1 for SIM800L communication
  SerialAT.begin(9600, SERIAL_8N1, MODEM_RX, MODEM_TX);

  // Reset the modem
  SerialMon.println("Resetting modem...");
  pinMode(MODEM_RST, OUTPUT);
  digitalWrite(MODEM_RST, LOW);
  delay(1000);
  digitalWrite(MODEM_RST, HIGH);
  delay(1000);

  // Initialize modem
  SerialMon.println("Starting modem...");
  modem.restart();

  // Display modem information
  String modemInfo = modem.getModemInfo();
  SerialMon.print("Modem Info: ");
  SerialMon.println(modemInfo);

  // Connect to the network
  SerialMon.println("Connecting to network...");
  if (!modem.gprsConnect(apn, user, pass)) {
    SerialMon.println("GPRS connection failed!");
    while (true); // Halt on error
  }
  SerialMon.println("GPRS connected successfully!");

  // Configure MQTT
  mqtt.setServer(broker, 1883);
  mqtt.setCallback(mqttCallback);
}

void loop() {
  // Ensure MQTT connection
  if (!mqtt.connected()) {
    reconnectMqtt();
  }
  mqtt.loop();

  // Send data every 10 seconds
  static unsigned long lastSend = 0;
  if (millis() - lastSend > 10000) {
    lastSend = millis();
    sendMqttData();
  }
}

// Reconnect to the MQTT broker
void reconnectMqtt() {
  while (!mqtt.connected()) {
    SerialMon.print("Connecting to MQTT...");
    if (mqtt.connect("SIM800Client", mqttUser, mqttPass)) {
      SerialMon.println("connected.");
    } else {
      SerialMon.print("failed, rc=");
      SerialMon.print(mqtt.state());
      SerialMon.println(" retrying in 5 seconds...");
      delay(5000);
    }
  }
}

// Handle incoming MQTT messages (optional)
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  SerialMon.print("Message arrived on topic: ");
  SerialMon.println(topic);
  SerialMon.print("Message: ");
  for (int i = 0; i < length; i++) {
    SerialMon.print((char)payload[i]);
  }
  SerialMon.println();
}

// Send random integer and string to MQTT
void sendMqttData() {
  // Prepare data
  int randomValue = random(1, 100); // Generate random integer
  String message = "hello sabbir";

  // Publish data
  String payload = String("{\"random\":") + randomValue + ",\"message\":\"" + message + "\"}";
  SerialMon.print("Publishing message: ");
  SerialMon.println(payload);

  if (mqtt.publish(topic, payload.c_str())) {
    SerialMon.println("Message published successfully.");
  } else {
    SerialMon.println("Failed to publish message.");
  }
}
